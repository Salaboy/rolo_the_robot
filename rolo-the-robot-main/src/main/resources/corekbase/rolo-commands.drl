package com.salaboy.rolo;

import com.salaboy.rolo.model.*;
import com.salaboy.rolo.*;

import com.salaboy.rolo.api.*;
import com.salaboy.rolo.api.Motor.*;

import com.salaboy.rolo.transport.*;

import org.kie.internal.event.rule.*;
import org.kie.api.runtime.rule.*;
import org.drools.core.common.*;




rule "Process Forward Command" 
    when
        RoloCommand(cmd == "FORWARD", $value: value )
        $m: Motor( )
    then
        $m.start(Integer.valueOf($value), Motor.DIRECTION.FORWARD);
        System.out.println(" >>> Process-FORWARD:"+$value);
        notifications.write("Process-FORWARD:"+$value);
end

rule "Process Backward Command" 
    when
        RoloCommand(cmd == "BACKWARD", $value: value)
        $m: Motor( )
    then
        $m.start(Integer.valueOf($value), Motor.DIRECTION.BACKWARD);
        System.out.println(" >>> Process-BACKWARD:"+$value);
        notifications.write("Process-BACKWARD:"+$value);
end

rule "Process Stop Command" 
    when
        RoloCommand(cmd == "STOP")
        $m: Motor( )
    then
        $m.stop();
        System.out.println("Process-STOP:");
        notifications.write(" >>> Process-STOP:");
end

rule "Process Left Command" 
    when
        RoloCommand(cmd == "LEFT", $value: value)
        $m: Motor( name == "MotorA")
    then
        $m.forward(Integer.valueOf($value), 500);
        System.out.println(" >>> Process-LEFT:"+$value);
        notifications.write("Process-LEFT:"+$value);
end

rule "Process Right Command" 
    when
        RoloCommand(cmd == "RIGHT", $value: value)
        $m: Motor( name == "MotorB")
    then
        $m.forward(Integer.valueOf($value), 500);
        System.out.println(" >>> Process-RIGHT:"+$value);
        notifications.write("Process-RIGHT:"+$value);
end


rule "Process Rotate Left"
    when
       RoloCommand(cmd == "ROTATE LEFT", $value: value)
       $mA: Motor( name == "MotorA") 
       $mB: Motor( name == "MotorB") 
    then
         $mA.forward(Integer.valueOf($value), 500);
         $mB.backward(Integer.valueOf($value), 500);
         System.out.println(" >>> Process-ROTATE_LEFT:"+$value);
         notifications.write("Process-ROTATE_LEFT:"+$value);
end

rule "Process Rotate Right"
    when
       RoloCommand(cmd == "ROTATE RIGHT", $value: value)
       $mA: Motor( name == "MotorA") 
       $mB: Motor( name == "MotorB") 
    then
        $mA.backward(Integer.valueOf($value), 500);
        $mB.forward(Integer.valueOf($value), 500);
        System.out.println(" >>> Process-ROTATE_RIGHT:"+$value);
        notifications.write("Process-ROTATE_RIGHT:"+$value);
end

rule "Process Rotate Head Left"
    when
        RoloCommand(cmd == "ROTATE HEAD LEFT", $value: value)
        $s180: Servo180(name == "Head")
    then
        $s180.rotate($s180.getCurrentDegree() + Integer.valueOf($value));
        System.out.println(" >>> Process-ROTATE_HEAD_LEFT:"+ $s180.getCurrentDegree());
        notifications.write("Process-ROTATE_HEAD_LEFT:"+ $s180.getCurrentDegree());
end

rule "Process Rotate Head Right"
    when
        RoloCommand(cmd == "ROTATE HEAD RIGHT", $value: value)
        $s180: Servo180(name == "Head")
    then
        $s180.rotate($s180.getCurrentDegree() - Integer.valueOf($value));
        System.out.println(" >>> Process-ROTATE_HEAD_RIGHT:"+ $s180.getCurrentDegree());
        notifications.write("Process-ROTATE_HEAD_RIGHT:"+ $s180.getCurrentDegree());
end
