package com.salaboy.lego.wedo;

import com.salaboy.rolo.model.*;
import com.salaboy.rolo.*;

import com.salaboy.rolo.api.*;
import com.salaboy.rolo.api.Motor.*;

import org.drools.common.*;
import org.kie.event.rule.*;
import org.kie.runtime.rule.*;
import org.kie.runtime.*;
import org.kie.runtime.KnowledgeRuntime;

declare DistanceReport
    @role(event)
    @expires(1s)
end

declare LightReport
    @role(event)
    @expires(2s)
end

query getAllMotors()
    Motor()
end

query getAllSensors()
    Sensor()
end

query getAllDistanceSensors()
    DistanceSensor()
end

query getAllTiltSensors()
    TiltSensor()
end

global HornetQSessionWriter notifications;


rule "Something too close - Robot Go Back" 
    when
        $r: RoloTheRobot()
        $m: Motor(  )
        UltraSonicSensor( $sensor: name )
        $n: Number( doubleValue < 30) from accumulate (DistanceReport( sensorName == $sensor, $d: distance ) over window:time( 300ms ) from entry-point "distance-sensor", average($d))
        
    then
       notifications.write("Process-SOMETHING_TOO_CLOSE:"+$n); 
       $m.start(120, DIRECTION.BACKWARD);
       Match item = ( Match ) kcontext.getMatch();
              final Motor motor = $m;
              final HornetQSessionWriter notif = notifications;
              ((AgendaItem)item).setActivationUnMatchListener( new ActivationUnMatchListener() {
                    
                    public void unMatch(Session session,
                                        Match match) {
                        System.out.println(" Stop Motor");
                        
                        motor.stop();
                        try{
                            notif.write("Stopping Motor because avg over: 30");
                        } catch(Exception e){
                            System.out.println("ERROR sending notification!!!");
                        }
                        
                   }
                } );


end

rule "Too Dark - Look another place" 
    when
        $r: RoloTheRobot()
        $s180: Servo180(name == "Head")
        LightSensor( $sensor: name )
        $n: Number( doubleValue < 300) from accumulate (LightReport( sensorName == $sensor, $l: light ) over window:time( 10s ) from entry-point "light-sensor", average($l))
        
    then
       notifications.write("Process-TOO_DARK:"+$n); 
       try{
            $s180.rotate(170);
            Thread.sleep(1000);
            $s180.rotate(0);
            Thread.sleep(1000);
            $s180.rotate(80);
            Thread.sleep(1000);
            
       }catch(Exception e){
           e.printStackTrace();
       }     
       
end


rule "Process Forward Command" 
    when
        RoloCommand(cmd == "FORWARD", $value: value )
        $m: Motor( )
    then
        $m.start(Integer.valueOf($value), Motor.DIRECTION.FORWARD);
        notifications.write("Process-FORWARD:"+$value);
end

rule "Process Backward Command" 
    when
        RoloCommand(cmd == "BACKWARD", $value: value)
        $m: Motor( )
    then
        $m.start(Integer.valueOf($value), Motor.DIRECTION.BACKWARD);
        notifications.write("Process-BACKWARD:"+$value);
end

rule "Process Stop Command" 
    when
        RoloCommand(cmd == "STOP")
        $m: Motor( )
    then
        $m.stop();
        notifications.write("Process-STOP:");
end

rule "Process Left Command" 
    when
        RoloCommand(cmd == "LEFT", $value: value)
        $m: Motor( name == "MotorA")
    then
        $m.forward(Integer.valueOf($value), 500);
        notifications.write("Process-LEFT:"+$value);
end

rule "Process Right Command" 
    when
        RoloCommand(cmd == "RIGHT", $value: value)
        $m: Motor( name == "MotorB")
    then
        $m.forward(Integer.valueOf($value), 500);
        notifications.write("Process-RIGHT:"+$value);
end


rule "Process Rotate Left"
    when
       RoloCommand(cmd == "ROTATE LEFT", $value: value)
       $mA: Motor( name == "MotorA") 
       $mB: Motor( name == "MotorB") 
    then
          System.out.println("########LEFT############### -> MA: "+$mA);
     System.out.println("########LEFT############### -> MB: "+$mB);
         $mA.forward(Integer.valueOf($value), 500);
         $mB.backward(Integer.valueOf($value), 500);
         notifications.write("Process-ROTATE_LEFT:"+$value);
end

rule "Process Rotate Right"
    when
       RoloCommand(cmd == "ROTATE RIGHT", $value: value)
       $mA: Motor( name == "MotorA") 
       $mB: Motor( name == "MotorB") 
    then
     System.out.println("########RIGHT############### -> MA: "+$mA);
     System.out.println("########RIGHT############### -> MB: "+$mB);
        $mA.backward(Integer.valueOf($value), 500);
         $mB.forward(Integer.valueOf($value), 500);
         notifications.write("Process-ROTATE_RIGHT:"+$value);
end

rule "Process Rotate Head Left"
    when
        RoloCommand(cmd == "ROTATE HEAD LEFT", $value: value)
        $s180: Servo180(name == "Head")
    then
        $s180.rotate($s180.getCurrentDegree() + Integer.valueOf($value));
        notifications.write("Process-ROTATE_HEAD_LEFT:"+ $s180.getCurrentDegree());
end

rule "Process Rotate Head Right"
    when
        RoloCommand(cmd == "ROTATE HEAD RIGHT", $value: value)
        $s180: Servo180(name == "Head")
    then
        $s180.rotate($s180.getCurrentDegree() - Integer.valueOf($value));
        notifications.write("Process-ROTATE_HEAD_RIGHT:"+ $s180.getCurrentDegree());
end



/*rule "Something is getting Closer" 
    when
        $r: RoloTheRobot()
        DistanceSensor( $sensor: name )
        $n: Number( doubleValue < 0.5 ) from accumulate (DistanceReport( sensorName == $sensor, $d: distance ) over window:time( 1000ms ) from entry-point "distance-sensor", tendency($d))
        
    then
       System.out.println("WARN: Something is getting closer" + $n);
end

rule "Something is going away" 
    when
        $r: RoloTheRobot()
        DistanceSensor( $sensor: name )
        $n: Number( doubleValue > 0.5 ) from accumulate (DistanceReport( sensorName == $sensor, $d: distance ) over window:time( 1000ms ) from entry-point "distance-sensor", tendency($d))
        
    then
       System.out.println("WARN: Something is going away" + $n);
end*/



/*rule " Robot log" 
    when
        
        $n: Number( doubleValue > 50) from accumulate (DistanceReport( $d: distance ) over window:time( 300ms ) from entry-point "distance-sensor", average($d))
    then
       System.out.println("Current avg: "+$n);
       

end*/






