/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.salaboy.rolo.client;

import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextArea;

/**
 *
 * @author salaboy
 */
public class RoloUIJFrame extends javax.swing.JFrame {

    private RoloClientConnector roloClientConnector;
    private boolean connected = false;
    /**
     * Creates new form RoloUIJFrame
     */
    public RoloUIJFrame() {
        initComponents();
        roloClientConnector = new RoloClientConnector("rolo-ui", new CommandClientHandler(this));
        
        
        
        
    }

    public JTextArea getNotificationjTextArea() {
        return notificationjTextArea;
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * 
     * 
     */
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        backwardjButton = new javax.swing.JButton();
        leftFWjButton = new javax.swing.JButton();
        rightFWjButton = new javax.swing.JButton();
        forwardjButton = new javax.swing.JButton();
        rotateLeftjButton = new javax.swing.JButton();
        rotateRightjButton = new javax.swing.JButton();
        stopjButton = new javax.swing.JButton();
        rightBackjButton = new javax.swing.JButton();
        leftBackjButton = new javax.swing.JButton();
        updateMindjButton = new javax.swing.JButton();
        pollFrontjButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notificationjTextArea = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        serverAddressjTextField = new javax.swing.JTextField();
        connectjButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        statusjLabel = new javax.swing.JLabel();
        localjCheckBox = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        mindjTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Controls"));

        backwardjButton.setText("Backward");
        backwardjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backwardjButtonActionPerformed(evt);
            }
        });

        leftFWjButton.setText("Left FW");
        leftFWjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftFWjButtonActionPerformed(evt);
            }
        });

        rightFWjButton.setText("Right FW");
        rightFWjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightFWjButtonActionPerformed(evt);
            }
        });

        forwardjButton.setText("Forward");
        forwardjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardjButtonActionPerformed(evt);
            }
        });

        rotateLeftjButton.setText("Rotate Left");
        rotateLeftjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateLeftjButtonActionPerformed(evt);
            }
        });

        rotateRightjButton.setText("Rotate Right");
        rotateRightjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateRightjButtonActionPerformed(evt);
            }
        });

        stopjButton.setText("Stop ALL");
        stopjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopjButtonActionPerformed(evt);
            }
        });

        rightBackjButton.setText("Right BACK");
        rightBackjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightBackjButtonActionPerformed(evt);
            }
        });

        leftBackjButton.setText("Left BACK");
        leftBackjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftBackjButtonActionPerformed(evt);
            }
        });

        updateMindjButton.setText("Update Mind");
        updateMindjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMindjButtonActionPerformed(evt);
            }
        });

        pollFrontjButton1.setText("Poll Sensors");
        pollFrontjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pollFrontjButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(rotateLeftjButton)
                        .add(18, 18, 18)
                        .add(rotateRightjButton))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(81, 81, 81)
                        .add(forwardjButton))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(78, 78, 78)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(stopjButton)
                            .add(backwardjButton))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel1Layout.createSequentialGroup()
                .add(14, 14, 14)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(leftFWjButton)
                    .add(leftBackjButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(rightFWjButton)
                    .add(rightBackjButton))
                .add(17, 17, 17))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .add(pollFrontjButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(updateMindjButton)
                .add(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(forwardjButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rotateLeftjButton)
                    .add(rotateRightjButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(backwardjButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(stopjButton)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(leftFWjButton)
                    .add(rightFWjButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rightBackjButton)
                    .add(leftBackjButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(pollFrontjButton1)
                    .add(updateMindjButton))
                .add(21, 21, 21))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Notifications"));

        notificationjTextArea.setColumns(20);
        notificationjTextArea.setRows(5);
        jScrollPane1.setViewportView(notificationjTextArea);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 860, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));

        serverAddressjTextField.setText("192.168.0.x");

        connectjButton.setText("Connect");
        connectjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectjButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Status:");

        statusjLabel.setBackground(new java.awt.Color(153, 0, 0));
        statusjLabel.setForeground(new java.awt.Color(153, 0, 0));
        statusjLabel.setText("Disconnected");

        localjCheckBox.setText("Local?");
        localjCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localjCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(serverAddressjTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 163, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(connectjButton))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(localjCheckBox)
                        .add(46, 46, 46)
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(statusjLabel)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(28, 28, 28)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(statusjLabel)
                    .add(localjCheckBox))
                .addContainerGap(11, Short.MAX_VALUE))
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(serverAddressjTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(connectjButton))
                .add(0, 0, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Mind"));

        mindjTextArea.setColumns(20);
        mindjTextArea.setRows(5);
        mindjTextArea.setText("rule \"looking for something to do\"\n    salience 10  \n    when\n        $fW: RobotFrontWheels()\n    then\n        $fW.forward();\n        notifications.fire(new MindNotificationEvent(\" Looking for something to do!\"));\nend\n\nrule \"If there is something closer than 40 cm turn left 90 degrees\"\n    when\n        $fW: RobotFrontWheels()\n        \n        accumulate (SonarsReport(  $front: front, $right: right, $left: left) over window:time( 300ms ) from entry-point \"distance-sensor\";\n                                                 $avg: average($front),\n                                                 $avgRight: average($right),\n                                                 $avgLeft: average($left);\n                                                 $avg < 50, $avg > 0, $avgRight > 0, $avgLeft > $avgRight)\n        \n    then\n       \n        $fW.rotateAndMove(\"left\", 90, \"forward\");\n        notifications.fire(new MindNotificationEvent(\" Rotating 90 degrees left because there is something in front of me \\n -> AVG: \" + $avg + \" - RIGHT AVG: \"+$avgRight + \" - LEFT AVG: \"+$avgLeft ));\n        \nend\n\nrule \"If there is something closer than 40 cm turn right 90 degrees\"\n    \n    when\n        $fW: RobotFrontWheels()\n        \n        accumulate (SonarsReport(  $front: front, $right: right, $left: left) over window:time( 300ms ) from entry-point \"distance-sensor\";\n                                                 $avg: average($front),\n                                                 $avgRight: average($right),\n                                                 $avgLeft: average($left);\n                                                 $avg < 50, $avg > 0, $avgLeft > 0, $avgLeft < $avgRight)\n        \n    then\n       \n        $fW.rotateAndMove(\"right\", 90, \"forward\");\n        notifications.fire(new MindNotificationEvent(\" Rotating 90 degrees right because there is something in front of me /n -> AVG: \" + $avg + \" - RIGHT AVG: \"+$avgRight + \" - LEFT AVG: \"+$avgLeft ));\n        \nend\n\ndeclare SlowDownRight\n\nend\n\nrule \"slow down on something too close on the left\"\n    \n    when\n        $fW: RobotFrontWheels()\n        \n        accumulate (SonarsReport(   $left: left) over window:time( 300ms ) from entry-point \"distance-sensor\";\n                                                 $avgLeft: average($left);\n                                                 $avgLeft > 0, $avgLeft < 20)\n        \n    then\n        insertLogical(new SlowDownRight());\n        \nend\n\nrule \"slow down right\"\n  when\n     SlowDownRight()\n    $fW: RobotFrontWheels()\nthen\n\n$fW.setWheelSpeed(\"right\", 20);\n        notifications.fire(new MindNotificationEvent(\" slowing down the right wheel \"));\n        \nend\n\nrule \"anti slow down right\"\n  when\n     not(SlowDownRight())\n    $fW: RobotFrontWheels()\nthen\n\n$fW.setWheelSpeed(\"right\", 35);\n        notifications.fire(new MindNotificationEvent(\" slowing down the right wheel \"));\n        \nend\n\n\n\n\n");
        jScrollPane2.setViewportView(mindjTextArea);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 281, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .add(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void forwardjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardjButtonActionPerformed
        // TODO add your handling code here:   
        roloClientConnector.write("WHEELS-FORWARD~126");
    }//GEN-LAST:event_forwardjButtonActionPerformed

    private void rightFWjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightFWjButtonActionPerformed
        // TODO add your handling code here:
        roloClientConnector.write("WHEEL-RIGHT-FORWARD~126");
    }//GEN-LAST:event_rightFWjButtonActionPerformed

    private void leftFWjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftFWjButtonActionPerformed
        
        roloClientConnector.write("WHEEL-LEFT-FORWARD~126");
    }//GEN-LAST:event_leftFWjButtonActionPerformed

    private void backwardjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backwardjButtonActionPerformed
        
        roloClientConnector.write("WHEELS-BACKWARD~126");
    }//GEN-LAST:event_backwardjButtonActionPerformed

    private void rotateRightjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateRightjButtonActionPerformed
        
        roloClientConnector.write("WHEELS-ROTATERIGHT~90");
    }//GEN-LAST:event_rotateRightjButtonActionPerformed

    private void rotateLeftjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateLeftjButtonActionPerformed
        
        roloClientConnector.write("WHEELS-ROTATELEFT~90");
    }//GEN-LAST:event_rotateLeftjButtonActionPerformed

    private void connectjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectjButtonActionPerformed
        
        if(!connected){
            connected = roloClientConnector.connect(serverAddressjTextField.getText(), 5445);
            if(connected){
                statusjLabel.setText("Connected");
                statusjLabel.setForeground(Color.green);
                connectjButton.setText("Disconnect");
            }
        }else{
            try {
                roloClientConnector.disconnect();
            } catch (Exception ex) {
                Logger.getLogger(RoloUIJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            connectjButton.setText("Connect");
            statusjLabel.setText("Disconnected");
            statusjLabel.setForeground(Color.red);
        }
        
    }//GEN-LAST:event_connectjButtonActionPerformed

    private void stopjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopjButtonActionPerformed
        // TODO add your handling code here:
        roloClientConnector.write("STOP-ALL");
    }//GEN-LAST:event_stopjButtonActionPerformed

  private void localjCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localjCheckBoxActionPerformed
    // TODO add your handling code here:
    if(localjCheckBox.isSelected()){
      serverAddressjTextField.setText("127.0.0.1");
    }else{
      serverAddressjTextField.setText("192.168.0.x");
    }
  }//GEN-LAST:event_localjCheckBoxActionPerformed

    private void updateMindjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMindjButtonActionPerformed
        // TODO add your handling code here:
        roloClientConnector.write("MIND-UPDATE~"+mindjTextArea.getText());
    }//GEN-LAST:event_updateMindjButtonActionPerformed

    private void rightBackjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBackjButtonActionPerformed
        // TODO add your handling code here:
        roloClientConnector.write("WHEEL-RIGHT-BACKWARD~126");
    }//GEN-LAST:event_rightBackjButtonActionPerformed

    private void leftBackjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftBackjButtonActionPerformed
        // TODO add your handling code here:
        roloClientConnector.write("WHEEL-LEFT-BACKWARD~126");
    }//GEN-LAST:event_leftBackjButtonActionPerformed

    private void pollFrontjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pollFrontjButton1ActionPerformed
        // TODO add your handling code here:
        roloClientConnector.write("SONARS-READ");
    }//GEN-LAST:event_pollFrontjButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoloUIJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoloUIJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoloUIJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoloUIJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoloUIJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backwardjButton;
    private javax.swing.JButton connectjButton;
    private javax.swing.JButton forwardjButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton leftBackjButton;
    private javax.swing.JButton leftFWjButton;
    private javax.swing.JCheckBox localjCheckBox;
    private javax.swing.JTextArea mindjTextArea;
    private javax.swing.JTextArea notificationjTextArea;
    private javax.swing.JButton pollFrontjButton1;
    private javax.swing.JButton rightBackjButton;
    private javax.swing.JButton rightFWjButton;
    private javax.swing.JButton rotateLeftjButton;
    private javax.swing.JButton rotateRightjButton;
    private javax.swing.JTextField serverAddressjTextField;
    private javax.swing.JLabel statusjLabel;
    private javax.swing.JButton stopjButton;
    private javax.swing.JButton updateMindjButton;
    // End of variables declaration//GEN-END:variables
    
}
