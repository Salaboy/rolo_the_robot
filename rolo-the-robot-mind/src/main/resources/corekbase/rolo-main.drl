package com.salaboy.rolo;

import com.salaboy.rolo.model.*;
import com.salaboy.rolo.model.reports.*;
import com.salaboy.rolo.*;

import com.salaboy.rolo.body.api.*;

import com.salaboy.rolo.events.*;

import com.salaboy.rolo.the.robot.comm.*;

import org.kie.internal.event.rule.*;
import org.kie.api.runtime.rule.*;
import org.drools.core.common.*;

import javax.enterprise.event.*;

declare SonarsReport
    @role(event)
    @expires(500ms)
end

global Event notifications;

global Event external;

rule "robot part logger"
    when
       $rP: RobotPart()
    then
        System.out.println(">>> A new robot part was added: "+ $rP);
        external.fire(new ExternalNotificationEvent(">>> A new robot part was added: "+ $rP));
end



rule "looking for something to do"
    salience 10  
    when
        $fW: RobotFrontWheels()
    then
        $fW.forward();
        notifications.fire(new MindNotificationEvent(" Looking for something to do!"));
end



rule "If there is something closer than 40 cm turn left 90 degrees"
    
    when
        $fW: RobotFrontWheels()
        
        accumulate (SonarsReport( $front: front, $right: right, $left: left) over window:time( 300ms ) from entry-point "distance-sensor";
                                                 $avg: average($front),
                                                 $avgRight: average($right),
                                                 $avgLeft: average($left);
                                                 $avg < 30, $avg > 0, $avgLeft > 0, $avgRight > 0, $avgLeft > $avgRight)
        
    then
        $fW.rotateAndMove("left", 90, "forward");
        notifications.fire(new MindNotificationEvent(" Rotating 90 degrees left because there is something in front of me \n -> AVG: " + $avg + " - RIGHT AVG: "+$avgRight + " - LEFT AVG: "+$avgLeft ));
        
end

rule "If there is something closer than 40 cm turn right 90 degrees"
    
    when
        $fW: RobotFrontWheels()
        accumulate (SonarsReport( $front: front, $right: right, $left: left) over window:time( 300ms ) from entry-point "distance-sensor";
                                                 $avg: average($front),
                                                 $avgRight: average($right),
                                                 $avgLeft: average($left);
                                                 $avg < 30, $avg > 0, $avgLeft > 0, $avgRight > 0, $avgLeft < $avgRight)
        
    then
       
        $fW.rotateAndMove("right", 90, "forward");
        notifications.fire(new MindNotificationEvent(" Rotating 90 degrees right because there is something in front of me /n -> AVG: " + $avg + " - RIGHT AVG: "+$avgRight + " - LEFT AVG: "+$avgLeft ));
        
end

rule "If there is something in the back than 40 cm turn right 90 degrees"
    
    when
        $fW: RobotFrontWheels()
        
        accumulate (SonarsReport( $back: back, $right: right, $left: left) over window:time( 300ms ) from entry-point "distance-sensor";
                                                 $avg: average($back),
                                                 $avgRight: average($right),
                                                 $avgLeft: average($left);
                                                 $avg < 30, $avg > 0, $avgLeft > 0, $avgRight > 0, $avgLeft < $avgRight)
        
    then
        $fW.rotateAndMove("right", 90, "forward");
        notifications.fire(new MindNotificationEvent(" Rotating 90 degrees right because there is something in the back of me /n -> AVG: " + $avg + " - RIGHT AVG: "+$avgRight + " - LEFT AVG: "+$avgLeft ));
        
end

rule "If there is something in the back than 40 cm turn left 90 degrees"
    
    when
        $fW: RobotFrontWheels()
        
        accumulate (SonarsReport( $back: back, $right: right, $left: left) over window:time( 300ms ) from entry-point "distance-sensor";
                                                 $avg: average($back),
                                                 $avgRight: average($right),
                                                 $avgLeft: average($left);
                                                 $avg < 30, $avg > 0, $avgLeft > 0, $avgRight > 0, $avgLeft > $avgRight)
        
    then
        $fW.rotateAndMove("left", 90, "forward");
        notifications.fire(new MindNotificationEvent(" Rotating 90 degrees left because there is something in the back of me /n -> AVG: " + $avg + " - RIGHT AVG: "+$avgRight + " - LEFT AVG: "+$avgLeft ));
        
end

rule "If there is something on the left closer than 25 cm turn 5 degrees right"
    when
        $n: Number( doubleValue < 10 && doubleValue > 0) from accumulate (SonarsReport($distance: left) over window:time( 300ms ) from entry-point "distance-sensor", average($distance))
        $fW: RobotFrontWheels()
    then
        $fW.rotateAndMove("right", 5, "forward");
        notifications.fire(new MindNotificationEvent(" Rotating 5 degrees right to move away from the object on the left ->" + $n));   
end

rule "If there is something on the right closer than 25 cm turn 5 degrees left"
    when
        $n: Number( doubleValue < 10  && doubleValue > 0) from accumulate (SonarsReport( $distance: right) over window:time( 300ms ) from entry-point "distance-sensor", average($distance))
        $fW: RobotFrontWheels()
    then
        $fW.rotateAndMove("left", 5, "forward");
        notifications.fire(new MindNotificationEvent(" Rotating 5 degrees left to move away from the object on the right ->" + $n));   
end



/*rule "Something is getting Closer" 
    when
        $r: RoloTheRobot()
        RobotSonar( $sensor: name )
        $n: Number( doubleValue < 0.5 ) from accumulate (DistanceReport( sensorName == $sensor, $d: distance ) over window:time( 1000ms ) from entry-point "distance-sensor", tendency($d))
        
    then
       System.out.println("WARN: Something is getting closer" + $n);
end

rule "Something is going away" 
    when
        $r: RoloTheRobot()
        RobotSonar( $sensor: name )
        $n: Number( doubleValue > 0.5 ) from accumulate (DistanceReport( sensorName == $sensor, $d: distance ) over window:time( 1000ms ) from entry-point "distance-sensor", tendency($d))
        
    then
       System.out.println("WARN: Something is going away" + $n);
end*/